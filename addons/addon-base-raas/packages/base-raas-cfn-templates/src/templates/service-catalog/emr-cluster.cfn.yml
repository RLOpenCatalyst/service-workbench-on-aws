AWSTemplateFormatVersion: 2010-09-09

Description: Service-Workbench-on-AWS EMR-Hail-Jupyter

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EMR Options
        Parameters:
          - Namespace
          - KeyName
          - VPC
          - Subnet
          - CoreNodeCount
          - DiskSizeGB
          - MasterInstanceType
          - WorkerInstanceType
          - WorkerBidPrice
          - AccessFromCIDRBlock
          - AmiId
      - Label:
          default: Tags
        Parameters:
          - NameTag
          - OwnerTag
          - PurposeTag

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names
  KeyName:
    Description: SSH key pair to use for EMR node login
    Type: AWS::EC2::KeyPair::KeyName
  SolutionNamespace:
    Type: String
    Description: The namespace value provided when onboarding the Member account
    Default: ''
  IsAppStreamEnabled:
    Type: String
    AllowedValues: [true, false]
    Description: Is AppStream enabled for this workspace
    Default: false
  VPC:
    Description: VPC for EMR nodes.
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: Subnet for EMR nodes, from the VPC selected above
    Type: AWS::EC2::Subnet::Id
  ALBSubnet1:
    Description: Public Subnet1 for Application Load Balancer in front of EMR nodes, from the VPC selected above
    Type: AWS::EC2::Subnet::Id
  ALBSubnet2:
    Description: Public Subnet1 for Application Load Balancer in front of EMR nodes, from the VPC selected above
    Type: AWS::EC2::Subnet::Id
  LoadBalancerType:
    Type: String
    Description: Enter internal if subnets are private subnets or enter internet-facing if subnets are public subnets 
    AllowedValues : ["internal", "internet-facing"]
  ACMSSLCertARN:
    Type: String
    Description: The ARN of the AWS Certificate Manager SSL Certificate to associate with the Load Balancer
  CustomDomainName:
    Type: String
    Description: Custom Domain Name you have used for your Service Workbench Application
  CoreNodeCount:
    Description: Number of core nodes to provision (1-80)
    Type: Number
    MinValue: '1'
    MaxValue: '80'
    Default: '5'
  DiskSizeGB:
    Description: EBS Volume size (GB) for each node
    Type: Number
    MinValue: '10'
    MaxValue: '1000'
    Default: '20'
  MasterInstanceType:
    Type: String
    Default: m5.xlarge
    Description: EMR node ec2 instance type.
  WorkerInstanceType:
    Type: String
    Default: m5.xlarge
    Description: EMR node ec2 instance type.
  Market:
    Type: String
    Default: ON_DEMAND
    Description: Which market to purchase workers on - ON_DEMAND or SPOT.
  WorkerBidPrice:
    Type: String
    Description: Bid price for the worker spot nodes. This is only applicable when Market = SPOT. Specify 0 for Market = ON_DEMAND.
  AccessFromCIDRBlock:
    Type: String
    MinLength: 9
    Description: Restrict WebUI access to specified address or range
  AmiId:
    Type: String
    Description: Ami Id to use for the cluster
  EnvironmentInstanceFiles:
    Type: String
    Description: >-
      An S3 URI (starting with "s3://") that specifies the location of files to be copied to
      the environment instance, including any bootstrap scripts
  S3Mounts:
    Type: String
    Description: A JSON array of objects with name, bucket and prefix properties used to mount data
  IamPolicyDocument:
    Type: String
    Description: The IAM policy to be associated with the launched workstation
  EncryptionKeyArn:
    Type: String
    Description: The ARN of the KMS encryption Key used to encrypt data in the cluster
  EgressStoreIamPolicyDocument:
    Type: String
    Description: The IAM policy for launched workstation to access egress store

Conditions:
  IamPolicyEmpty: !Equals [!Ref IamPolicyDocument, '{}']
  IsOnDemandCondition: !Equals [!Ref Market, ON_DEMAND]
  EgressStoreIamPolicyEmpty: !Equals [!Ref EgressStoreIamPolicyDocument, '{}']

Resources:
  # TODO: Use one bucket for EMR logs per account, so shift deployment to account on-boarding and pass here as param
  LogBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration: # Block all public access configuration for the S3 bucket
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: Deny requests that do not use TLS/HTTPS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Join ['/', [!GetAtt LogBucket.Arn, '*']]
              - !GetAtt LogBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Jupyter
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8192
          ToPort: 8192
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        
  InstanceProfile:
    Properties:
      Path: '/'
      Roles:
        - Ref: Ec2Role
    Type: AWS::IAM::InstanceProfile

  InstanceRolePermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for EC2 instance role
      ManagedPolicyName: !Join ['-', [Ref: Namespace, 'emr-permission-boundary']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:GetParameter*'
              - 'secretsmanager:GetSecretValue'
              - 's3:*'
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
              - 'ec2:CreateTags'
              - 'ec2:DeleteTags'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Resource: 'arn:aws:iam::*:role/swb-*'

  Ec2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'ec2-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - !If
          - IamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-studydata-policy']]
            PolicyDocument: !Ref IamPolicyDocument
        - !If
          - EgressStoreIamPolicyEmpty
          - !Ref 'AWS::NoValue'
          - PolicyName: !Join ['-', [Ref: Namespace, 's3-egressstore-policy']]
            PolicyDocument: !Ref EgressStoreIamPolicyDocument
        - PolicyName: !Join ['-', [Ref: Namespace, 'tag-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                Condition:
                  StringLike:
                    ec2:ResourceTag/Name: !Sub '${Namespace}-emr'
        - PolicyName: !Join ['-', [Ref: Namespace, 'config-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParametersByPath'
                  - 'ssm:GetParameter'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/config/*'
              - Effect: 'Allow'
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                  - 's3:GetObject'
                Resource: '*'
        - PolicyName: !Join ['-', [Ref: Namespace, 's3-bootstrap-script-policy']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${AWS::Region}.elasticmapreduce/bootstrap-actions/run-if'
                  - 'arn:aws:s3:::elasticmapreduce/bootstrap-actions/log4j/patch-log4j-emr-5.27.1-v1.sh'
                  - !Sub
                    - 'arn:aws:s3:::${S3Location}/*'
                    # Remove "s3://" prefix from EnvironmentInstanceFiles
                    - S3Location: !Select [1, !Split ['s3://', !Ref EnvironmentInstanceFiles]]
              - Effect: 'Allow'
                Action: 's3:ListBucket'
                Resource: !Sub
                  - 'arn:aws:s3:::${S3Bucket}'
                  - S3Bucket: !Select [2, !Split ['/', !Ref EnvironmentInstanceFiles]]
                Condition:
                  StringLike:
                    s3:prefix: !Sub
                      - '${S3Prefix}/*'
                      - S3Prefix: !Select [3, !Split ['/', !Ref EnvironmentInstanceFiles]]
        - PolicyName: !Join ['-', [Ref: Namespace, 's3-get-and-list-any']]
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:List*
                Resource:
                  - 'arn:aws:s3:::embed-aim-ahead'
                  - 'arn:aws:s3:::embed-aim-ahead/*'
      PermissionsBoundary: !Ref InstanceRolePermissionBoundary

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      PermissionsBoundary: arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

  EmrSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      SecurityConfiguration:
        {
          'EncryptionConfiguration':
            {
              'AtRestEncryptionConfiguration':
                {
                  'LocalDiskEncryptionConfiguration':
                    {
                      'EncryptionKeyProviderType': 'AwsKms',
                      'AwsKmsKey': { 'Ref': 'EncryptionKeyArn' },
                      'EnableEbsEncryption': true,
                    },
                },
              'EnableInTransitEncryption': false,
              'EnableAtRestEncryption': true,
            },
        }

  # TODO: customise jupyter password from launch ui
  # TODO: Add security configuration to cluster
  # TODO: Can we make the jupyter use https?
  # TODO: Also change notebook owner to hadoop on launch
  EmrCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Applications:
        - Name: Hadoop
        - Name: Hive
        - Name: Spark
      BootstrapActions:
        - Name: Run-Python-Jupyter
          ScriptBootstrapAction:
            Path: !Sub 's3://${AWS::Region}.elasticmapreduce/bootstrap-actions/run-if'
            Args:
              - 'instance.isMaster=true'
              - '/opt/hail-on-AWS-spot-instances/src/jupyter_run.sh'
        - Name: Mount-S3-Resources
          ScriptBootstrapAction:
            Path: !Sub '${EnvironmentInstanceFiles}/get_bootstrap.sh'
            Args:
              - !Ref EnvironmentInstanceFiles
              - !Ref S3Mounts
        - Name: Patch-Log-4j
          ScriptBootstrapAction:
            Path: 's3://elasticmapreduce/bootstrap-actions/log4j/patch-log4j-emr-5.27.1-v1.sh'
      CustomAmiId:
        Ref: AmiId
      Configurations:
        - Classification: spark
          ConfigurationProperties:
            maximizeResourceAllocation: true
        - Classification: yarn-site
          ConfigurationProperties:
            yarn.nodemanager.vmem-check-enabled: false
        - Classification: spark-defaults
          ConfigurationProperties:
            spark.hadoop.io.compression.codecs: 'org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.GzipCodec'
            spark.serializer: 'org.apache.spark.serializer.KryoSerializer'
            # Defaults picked from spark conf
            # https://github.com/apache/spark/blob/878527d9fae8945d087ec871bb0a5f49b6341939/sql/catalyst/src/main/scala/org/apache/spark/sql/internal/SQLConf.scala#L1322-L1339
            spark.hadoop.parquet.block.size: '134217728' # 128MB
            spark.sql.files.maxPartitionBytes: '134217728' # 128 MB
            spark.sql.files.openCostInBytes: '4194304' # 4 MB
          Configurations: []
      Instances:
        AdditionalMasterSecurityGroups:
          - Fn::GetAtt:
              - MasterSecurityGroup
              - GroupId
        Ec2KeyName:
          Ref: KeyName
        Ec2SubnetId:
          Ref: Subnet
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType:
            Ref: MasterInstanceType
        CoreInstanceGroup: !If
          - IsOnDemandCondition
          - InstanceCount:
              Ref: CoreNodeCount
            InstanceType:
              Ref: WorkerInstanceType
            Market:
              Ref: Market
            EbsConfiguration:
              EbsOptimized: true
              EbsBlockDeviceConfigs:
                - VolumeSpecification:
                    SizeInGB:
                      Ref: DiskSizeGB
                    VolumeType: gp2
          - InstanceCount:
              Ref: CoreNodeCount
            InstanceType:
              Ref: WorkerInstanceType
            Market:
              Ref: Market
            BidPrice:
              Ref: WorkerBidPrice
            EbsConfiguration:
              EbsOptimized: true
              EbsBlockDeviceConfigs:
                - VolumeSpecification:
                    SizeInGB:
                      Ref: DiskSizeGB
                    VolumeType: gp2
      JobFlowRole:
        Ref: InstanceProfile
      Name: !Sub '${Namespace}-emr'
      Tags: # Add Name tag so EC2 instances are easily identifiable
        - Key: Name
          Value: !Sub '${Namespace}-emr'
      ServiceRole:
        Ref: ServiceRole
      ReleaseLabel: emr-5.27.1 # Make sure to change/remove the S3 location from Patch-Log-4j bootstrap if changing the release label
      # This has to be true because we assume a new user each time.
      VisibleToAllUsers: true
      SecurityConfiguration: !Ref EmrSecurityConfiguration
      LogUri: !Sub 's3://${LogBucket}'

# =============================================================================================
  # Load Balancer
# =============================================================================================
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: AccessFromCIDRBlock

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref LoadBalancerType
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60

      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref ALBSubnet1
        - !Ref ALBSubnet2

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      TargetType: ip
      Matcher:
        HttpCode: '200'
      Port: 8192
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id:  !Join
              - '.'
              - - !Select [1, !Split ['-', !GetAtt EmrCluster.MasterPublicDNS]]
                - !Select [2, !Split ['-', !GetAtt EmrCluster.MasterPublicDNS]]
                - !Select [3, !Split ['-', !GetAtt EmrCluster.MasterPublicDNS]]
                - !Select [0, !Split ['.', !Select [4, !Split ['-', !GetAtt EmrCluster.MasterPublicDNS]]]]
        Port: 8192
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ALBHttpsGangliaListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Certificates:
        - CertificateArn: !Ref ACMSSLCertARN
      Port: 443
      Protocol: HTTPS

Outputs:

  MetaConnection1Type:
    Description: Type of environment this connection is for
    Value: emr

  JupyterUrl:
    Description: Open Jupyter on your new EMR cluster
    Value: !Sub 'https://emr-${LoadBalancer.LoadBalancerName}.${CustomDomainName}'
  
  ApplicationLoadBalancerDNS:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.DNSName
  ApplicationLoadBalancerName:
    Description: ALB DNS Name
    Value: !GetAtt LoadBalancer.LoadBalancerName
  LogBucket:
    Description: EMR Scratch data and Logs bucket
    Value: !Ref LogBucket
  WorkspaceInstanceRoleArn:
    Description: IAM role assumed by the EMR workspace instances
    Value: !GetAtt Ec2Role.Arn

  #  Connection related outputs. These outputs need to have prefix "MetaConnection"
  #  The "connections" are derived based on the CFN outputs as follows.
  #
  #  CFN outputs with the OutputKey having format "MetaConnection<ConnectionAttrib>" or "MetaConnection<N><ConnectionAttrib>"
  #  are used for extracting connection information.
  #  - If the environment has only one connection then it can have outputs with "MetaConnection<ConnectionAttrib>" format.
  #  - If it has multiple connections then it can have outputs with "MetaConnection<N><ConnectionAttrib>" format.
  #  For example, MetaConnection1Name, MetaConnection2Name, etc.
  #
  #  The expected CFN output variables used for capturing connections related information are as follows:
  #
  #  - MetaConnectionName (or MetaConnection<N>Name) - Provides name for connection
  #
  #  - MetaConnectionUrl (or MetaConnection<N>Url) - Provides connection url, if available
  #
  #  - MetaConnectionScheme (or MetaConnection<N>Scheme) - Provides connection protocol information such as http, https, ssh, jdbc, odbc etc
  #
  #  - MetaConnectionType (or MetaConnection<N>Type) - Provides type of the connection such as "SageMaker", "EMR", "FOO", "BAR" etc
  #
  #  - MetaConnectionInfo (or MetaConnection<N>Info) - Provides extra information required to form connection url.
  #  For example, in case of MetaConnectionType = SageMaker, the MetaConnectionInfo should provide SageMaker notebook
  #  instance name that can be used to form pre-signed SageMaker URL.
  #
  #  - MetaConnectionInstanceId (or MetaConnection<N>InstanceId) - Provides AWS EC2 instanceId of the instance to connect to when applicable.
  #  Currently this is applicable only when ConnectionScheme = 'ssh'.
  #  This instanceId will be used for sending user's SSH public key using AWS EC2 Instance Connect when user wants to SSH to the instance.
  #
  MetaConnection1Name:
    Description: Name for connection 1
    Value: Main URL for the Jupyter Notebook

  MetaConnection1Url:
    Description: URL to connect to the Jupyter Notebook
    Value: !Sub 'https://emr-${LoadBalancer.LoadBalancerName}.${CustomDomainName}'
