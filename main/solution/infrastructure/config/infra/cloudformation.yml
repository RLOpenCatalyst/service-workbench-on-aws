Conditions:
  IsDev: !Equals ['${self:custom.settings.envType}', 'dev']
  UseCustomDomain: !Not
    - !Equals ['${self:custom.settings.domainName}', '']
  UseHostedZoneId: !Not
    - !Equals ['${self:custom.settings.hostedZoneId}', '']

  IsInternetFacing: !Equals ['${self:custom.settings.InternetFacing}', 'Yes']

  CustomDomainWithoutHostedZoneId: !And
    - !Not
      - !Equals ['${self:custom.settings.domainName}', '']
    - !Equals ['${self:custom.settings.hostedZoneId}', '']

Description: (SO0144) Service Workbench on AWS Solution

Mappings:
  ELBAccountIDMapping:
    us-east-1:
      Id: '127311923021'
    us-east-2:
      Id: '033677994240'
    us-west-1:
      Id: '027434742980'
    us-west-2:
      Id: '797873946194'
    af-south-1:
      Id: '098369216593'
    ca-central-1:
      Id: '985666609251'
    eu-central-1:
      Id: '054676820928'
    eu-west-1:
      Id: '156460612806'
    eu-west-2:
      Id: '652711504416'
    eu-south-1:
      Id: '635631232127'
    eu-west-3:
      Id: '009996457667'
    eu-north-1:
      Id: '897822967062'
    ap-east-1:
      Id: '754344448648'
    ap-northeast-1:
      Id: '582318560864'
    ap-northeast-2:
      Id: '600734575887'
    ap-northeast-3:
      Id: '383597477331'
    ap-southeast-1:
      Id: '114774131450'
    ap-southeast-2:
      Id: '783225319266'
    ap-south-1:
      Id: '718504428378'
    me-south-1:
      Id: '076674570225'
    sa-east-1:
      Id: '507241528517'
    us-gov-west-1:
      Id: '048591011584'
    us-gov-east-1:
      Id: '190560391635'
    cn-north-1:
      Id: '638102146993'
    cn-northwest-1:
      Id: '037604701340'

Parameters:

  
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: myenv

  ServiceName:
    Type: String
      # update with the name of the service
    Default: ${self:custom.settings.namespace}

  ContainerPort:
    Type: Number
    Default: 80

  HealthCheckPath:
    Type: String
    Default: /

  MinContainers:
    Type: Number
    Default: 2
    # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
    # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50

Resources:


  # =============================================================================================
  # Setting up Cluster and Load Balancer
  # =============================================================================================

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 512
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 1GB
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Join
            - ''
            - - !Ref AWS::AccountId
              - '.dkr.ecr.'
              - '${self:custom.settings.awsRegion}'
              - '.amazonaws.com/'
              - '${self:custom.settings.ecrRespositoryName}'
              - ':latest'
          
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  # A role needed by ECS

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'


  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -
  # A role needed for auto scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'


  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: '${self:custom.settings.VPC}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId: '${self:custom.settings.VPC}'
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    DependsOn:
      - ListenerHTTPS
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - '${self:custom.settings.ECSSubnet1}'
            - '${self:custom.settings.ECSSubnet2}'
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  LambdaProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, LambdaProxyRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: '${self:custom.settings.VPC}'

  
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: ${self:custom.settings.certificateArn}
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme: !If
        - IsInternetFacing
        - 'internet-facing'
        - 'internal'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - '${self:custom.settings.ALBSubnet1}'
        - '${self:custom.settings.ALBSubnet2}'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue

  # =============================================================================================
  # S3 Buckets
  # =============================================================================================

  # S3 Bucket for S3 access logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.settings.loggingBucketName}
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Statement:
          - Sid: Deny requests that do not use TLS/HTTPS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Join ['/', [!GetAtt LoggingBucket.Arn, '*']]
              - !GetAtt LoggingBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Deny requests that do not use SigV4
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Join ['/', [!GetAtt LoggingBucket.Arn, '*']]
            Condition:
              StringNotEquals:
                s3:signatureversion: 'AWS4-HMAC-SHA256'
          - Sid: ELB Logging permissions
            Effect: Allow
            Principal:
              AWS: !Join ['', ['arn:aws:iam::', !FindInMap [ELBAccountIDMapping, !Ref 'AWS::Region', Id], ':root']]
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref LoggingBucket, '/elb/AWSLogs/*/*']]
          - Sid: ELB Logging permissions
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref LoggingBucket, '/elb/AWSLogs/*/*']]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: ELB Logging permissions
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref LoggingBucket]]

  # S3 Bucket for the static website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.settings.websiteBucketName}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: Allow CloudFront Origin Access Identity
            Action:
              - 's3:GetObject'
            Effect: Allow
            Principal:
              AWS: !Join ['', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref 'CloudFrontOAI']]
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', '/*']]
          - Sid: Deny requests that do not use TLS/HTTPS
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              - !Join ['/', [!GetAtt WebsiteBucket.Arn, '*']]
              - !GetAtt WebsiteBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Deny requests that do not use SigV4
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource: !Join ['/', [!GetAtt WebsiteBucket.Arn, '*']]
            Condition:
              StringNotEquals:
                s3:signatureversion: 'AWS4-HMAC-SHA256'

  # =============================================================================================
  # CloudFront
  # =============================================================================================

  WebsiteCloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: 'CloudFront Distribution pointing to ${self:custom.settings.websiteBucketName}'
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref 'CloudFrontOAI']]
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        Logging:
          Bucket: ${self:custom.settings.loggingBucketName}.s3.amazonaws.com
          Prefix: cloudfront/

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'OAI for ${self:custom.settings.websiteBucketName}'


  # =============================================================================================
  # Route 53
  # =============================================================================================

  # HostedZone:
  #   Type: AWS::Route53::HostedZone
  #   Condition: CustomDomainWithoutHostedZoneId
  #   DeletionPolicy: Retain
  #   Properties:
  #     Name: ${self:custom.settings.domainName}

  # DomainRecord:
  #   Type: AWS::Route53::RecordSetGroup
  #   Condition: UseCustomDomain
  #   Properties:
  #     # Blank hosted zone ID in stage file creates a new one
  #     # This is to ensure backwards compatibility
  #     HostedZoneId: !If
  #       - UseHostedZoneId
  #       - ${self:custom.settings.hostedZoneId}
  #       - !Ref HostedZone
  #     RecordSets:
  #       - Name: ${self:custom.settings.domainName}
  #         Type: A
  #         AliasTarget:
  #           HostedZoneId: Z2FDTNDATAQYW2 # This is a required hard-coded string that is to be used for AWS
  #           DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  WebsiteUrl:
    Description: URL for the main website hosted on S3 via CloudFront
    Value: !If
      - UseCustomDomain
      - https://${self:custom.settings.domainName}
      - !Join ['', ['https://', !GetAtt LoadBalancer.DNSName]]

  LoadBalancerFullName:
    Description: The load balancers full name
    Value: !GetAtt "LoadBalancer.LoadBalancerFullName"
    Export:
      Name: !Sub "${self:custom.settings.awsRegionShortName}-${self:custom.settings.solutionName}-LoadBalancerFullName"

  WebsiteBucket:
    Description: The bucket name of the static website
    Value: !Ref WebsiteBucket

  LoggingBucket:
    Description: The bucket name for S3 access logging
    Value: !Ref LoggingBucket

  CloudFrontId:
    Description: Id of the CloudFront distribution
    Value: !Ref WebsiteCloudFront

  HostedZoneId:
    Description: Id of the hosted zone created when a custom domain is used
    Value: '${self:custom.settings.HostedZoneId}'

  LambdaProxyArn:
    Description: Arn of Lambda Proxy Function
    Value: !GetAtt 'LambdaProxyHandlerLambdaFunction.Arn'

  ClusterName:
    Value: !Ref Cluster

  ServiceName:
    Value: !GetAtt 'Service.Name'